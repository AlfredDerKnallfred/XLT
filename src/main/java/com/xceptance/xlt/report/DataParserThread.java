/*
 * Copyright (c) 2005-2020 Xceptance Software Technologies GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.xceptance.xlt.report;

import java.util.List;
import java.util.Map.Entry;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import com.xceptance.common.util.SimpleArrayList;
import com.xceptance.xlt.api.engine.ActionData;
import com.xceptance.xlt.api.engine.Data;
import com.xceptance.xlt.api.engine.PageLoadTimingData;
import com.xceptance.xlt.api.engine.RequestData;
import com.xceptance.xlt.api.engine.TransactionData;

/**
 * Parses lines to data records and performs any data record preprocessing that can be done in parallel. Preprocessing
 * also includes executing request merge rules.
 */
class DataParserThread implements Runnable
{
    /**
     * Class logger.
     */
    private static final Log LOG = LogFactory.getLog(DataParserThread.class);

    /**
     * Pattern used to rename the name of Web driver timers generated by FF add-on.
     */
    private static final Pattern WD_TIMER_NAME_PATTERN = Pattern.compile("page_\\d+");

    /**
     * The data record factory.
     */
    private final DataRecordFactory dataRecordFactory;

    /**
     * The dispatcher that coordinates result processing.
     */
    private final Dispatcher dispatcher;

    /**
     * The start time of the report period. Data records generated outside this window will be ignored.
     */
    private final long fromTime;

    /**
     * The end time of the report period. Data records generated outside this window will be ignored.
     */
    private final long toTime;

    /**
     * Constructor.
     *
     * @param dataRecordFactory
     *            the data record factory
     * @param fromTime
     *            the start time
     * @param toTime
     *            the end time
     * @param requestProcessingRules
     *            the request processing rules
     * @param dispatcher
     *            the dispatcher that coordinates result processing
     * @param removeIndexesFromRequestNames
     *            whether to automatically remove any indexes from request names
     */
    public DataParserThread(final Dispatcher dispatcher, final DataRecordFactory dataRecordFactory, final long fromTime, final long toTime)
    {
        this.dataRecordFactory = dataRecordFactory;
        this.fromTime = fromTime;
        this.toTime = toTime;
        this.dispatcher = dispatcher;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void run()
    {
        while (true)
        {
            try
            {
                // get a chunk of lines
                final DataChunk lineChunk = dispatcher.retrieveReadData();
                final List<String> lines = lineChunk.getLines();

                // parse the chunk of lines and preprocess the results
                final SimpleArrayList<Data> dataRecordChunk = new SimpleArrayList<>(lines.size());

                int lineNumber = lineChunk.getBaseLineNumber();

                final int size = lines.size();
                for (int i = 0; i < size; i++)
                {
                    final Data data = parseLine(lines.get(i), lineNumber, lineChunk);
                    if (data != null)
                    {
                        dataRecordChunk.add(data);
                    }

                    lineNumber++;
                }

                // deliver the chunk of parsed data records
                dispatcher.addParsedData(dataRecordChunk);
            }
            catch (final InterruptedException e)
            {
                break;
            }
        }
    }

    /**
     * Parses the given line to a data record.
     *
     * @param line
     *            the line to parse
     * @param lineNumber
     *            the number of the line in its file (for logging purposes)
     * @param lineChunk
     *            the line chunk the line belongs to
     * @return the parsed data record, or <code>null</code> if the line could not be parsed or the data record's
     *         timestamp was outside the configured time period
     */
    private Data parseLine(final String line, final int lineNumber, final DataChunk lineChunk)
    {
        try
        {
            // parse the data record
            final Data dataRecord = dataRecordFactory.createStatistics(line);

            // skip the data record if it was not generated in the given time period
            final long time = dataRecord.getTime();
            if (time < fromTime || time > toTime)
            {
                return null;
            }

            // set general fields
            dataRecord.setAgentName(lineChunk.getAgentName());
            dataRecord.setTransactionName(lineChunk.getTestCaseName());

            // set special fields / special handling
            if (dataRecord instanceof TransactionData)
            {
                final TransactionData td = (TransactionData) dataRecord;
                td.setTestUserNumber(lineChunk.getUserNumber());
            }
            else if (lineChunk.getCollectActionNames() && dataRecord instanceof ActionData)
            {
                // store the action name/time for later use
                lineChunk.getActionNames().put(dataRecord.getTime(), dataRecord.getName());
            }
            else if (lineChunk.getAdjustTimerNames() && (dataRecord instanceof RequestData || dataRecord instanceof PageLoadTimingData))
            {
                // rename web driver requests/custom timers using the previously stored action names
                final Entry<Long, String> entry = lineChunk.getActionNames().floorEntry(time);
                final String actionName = (entry != null) ? entry.getValue() : "UnknownAction";

                final Matcher m = WD_TIMER_NAME_PATTERN.matcher(dataRecord.getName());
                dataRecord.setName(m.replaceFirst(actionName));
            }

            return dataRecord;
        }
        catch (final Exception ex)
        {
            final String msg = String.format("Failed to parse data record at line %,d in file '%s': %s", lineNumber, lineChunk.getFile(),
                                             ex);
            LOG.error(msg);
            ex.printStackTrace();

            return null;
        }
    }
}
